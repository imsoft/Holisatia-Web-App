// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ENUMS
enum UserRole {
  admin
  professional
  user
}

enum TherapyType {
  traditional
  alternative
  both
}

enum ConsultationFormat {
  in_person
  online
  both
}

enum LocationType {
  house
  office
  building
}

// MODELS
model User {
  id            String    @id @unique @default(uuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  birthday      DateTime?
  role          UserRole  @default(user)
  image         String?
  password      String?
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")
  favoriteIds   String[]  @map("favorite_ids")

  contact       Contact?
  professionals Professional?
  locations     Location?
  accounts      Account[]
}

model Professional {
  id                              String       @id @unique @default(uuid())
  specialty                       String?
  focusAreas                      String?      @map("focus_areas")
  aspect                          String?
  therapyType                     TherapyType?
  languages                       String?
  qualification                   Int?
  clinicalQuestionnaireAttachment String?      @map("clinical_questionnaire_attachment")
  approved                        Boolean?
  createdAt                       DateTime     @default(now()) @map("created_at")
  updatedAt                       DateTime     @updatedAt @map("updated_at")

  userProfessional   User?   @relation(fields: [userProfessionalId], references: [id], onDelete: Cascade)
  userProfessionalId String? @unique @map("user_professional_id")

  sessionDetails ProfessionalSessionDetail?
}

model Contact {
  id           String   @id @unique @default(uuid())
  facebookUrl  String?  @map("facebook_url")
  instagramUrl String?  @map("instagram_url")
  tiktokUrl    String?  @map("tiktok_url")
  threadsUrl   String?  @map("threads_url")
  youtubeUrl   String?  @map("youtube_url")
  xUrl         String?  @map("x_url")
  linkedinUrl  String?  @map("linkedin_url")
  phoneNumber  String?  @map("phone_number")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  userContact   User?   @relation(fields: [userContactId], references: [id], onDelete: Cascade)
  userContactId String? @unique @map("user_contact_id")
}

model ProfessionalSessionDetail {
  id                 String              @id @unique @default(uuid())
  price              Float?
  sessionDuration    String?             @map("session_duration")
  openingHours       String?             @map("opening_hours")
  closingHours       String?             @map("closing_hours")
  consultationFormat ConsultationFormat?
  consultoryImages   String[]            @map("consultory_images")
  createdAt          DateTime            @default(now()) @map("created_at")
  updatedAt          DateTime            @updatedAt @map("updated_at")

  professional                Professional? @relation(fields: [professionalSessionDetailId], references: [id], onDelete: Cascade)
  professionalSessionDetailId String?       @unique @map("professional_session_detail_id")
}

model Location {
  id            String        @id @unique @default(uuid())
  state         String?
  city          String?
  address       String?
  outerNumber   String?       @map("outer_number")
  innerNumber   String?       @map("inner_number")
  neighborhood  String?
  locationType  LocationType?
  postalCode    String?       @map("postal_code")
  googleMapsUrl String?       @map("google_maps_url")
  createdAt     DateTime      @default(now()) @map("created_at")
  updatedAt     DateTime      @updatedAt @map("updated_at")

  user           User?   @relation(fields: [userLocationId], references: [id], onDelete: Cascade)
  userLocationId String? @unique @map("user_location_id")
}

model Account {
  id     String @id @default(cuid())
  userId String

  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}
